// Generated by Copilot - September 1, 2025 at 12:45 PM
import { api } from './api';

export interface Message {
  id: number;
  senderId: number;
  senderName: string;
  senderRole: string;
  receiverId: number;
  receiverName: string;
  subject: string;
  content: string;
  priority: 'Low' | 'Normal' | 'High' | 'Urgent';
  threadId: string;
  sentAt: string;
  isRead: boolean;
  readAt?: string;
  attachments: Attachment[];
}

export interface Attachment {
  id: number;
  fileName: string;
  fileSize: number;
  fileType: string;
  uploadedAt: string;
}

export interface Conversation {
  threadId: string;
  otherParticipant: string;
  otherParticipantRole: string;
  lastMessageContent: string;
  lastMessageTime: string;
  unreadCount: number;
  priority: 'Low' | 'Normal' | 'High' | 'Urgent';
}

export interface Contact {
  id: number;
  name: string;
  email: string;
  role: string;
}

export interface SendMessageRequest {
  receiverId: number;
  subject: string;
  content: string;
  priority: 'Low' | 'Normal' | 'High' | 'Urgent';
  threadId?: string;
  replyToMessageId?: number;
  attachments?: AttachmentUpload[];
}

export interface AttachmentUpload {
  fileName: string;
  fileContent: ArrayBuffer;
  fileType: string;
  fileSize: number;
}

export interface MessageSearchRequest {
  query?: string;
  priority?: 'Low' | 'Normal' | 'High' | 'Urgent';
  fromUserId?: number;
  startDate?: string;
  endDate?: string;
  isRead?: boolean;
  page: number;
  pageSize: number;
}

export interface MessageSearchResponse {
  messages: Message[];
  totalCount: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

/**
 * Service for managing secure messaging functionality
 */
export class MessageService {
  /**
   * Send a new message
   */
  async sendMessage(request: SendMessageRequest): Promise<Message> {
    const response = await api.post('/api/message/send', request);
    return response.data;
  }

  /**
   * Get all conversations for the current user
   */
  async getConversations(): Promise<Conversation[]> {
    const response = await api.get('/message/conversations');
    return response.data;
  }

  /**
   * Get messages in a specific thread
   */
  async getMessagesInThread(threadId: string): Promise<Message[]> {
    const response = await api.get(`/message/thread/${threadId}`);
    return response.data;
  }

  /**
   * Get a specific message by ID
   */
  async getMessage(messageId: number): Promise<Message> {
    const response = await api.get(`/message/${messageId}`);
    return response.data;
  }

  /**
   * Mark a message as read
   */
  async markAsRead(messageId: number): Promise<void> {
    await api.post(`/message/${messageId}/read`);
  }

  /**
   * Archive a message
   */
  async archiveMessage(messageId: number): Promise<void> {
    await api.post(`/message/${messageId}/archive`);
  }

  /**
   * Search messages
   */
  async searchMessages(request: MessageSearchRequest): Promise<MessageSearchResponse> {
    const response = await api.post('/message/search', request);
    return response.data;
  }

  /**
   * Get authorized contacts for messaging
   */
  async getContacts(): Promise<Contact[]> {
    const response = await api.get('/message/contacts');
    return response.data;
  }

  /**
   * Check if current user can send message to another user
   */
  async canSendMessage(receiverId: number): Promise<boolean> {
    const response = await api.get(`/message/can-message/${receiverId}`);
    return response.data.canSend;
  }

  /**
   * Get unread message count for current user
   */
  async getUnreadCount(): Promise<number> {
    const response = await api.get('/message/unread-count');
    return response.data.unreadCount;
  }
}

export const messageService = new MessageService();
