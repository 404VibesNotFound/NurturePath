// Generated by Copilot - September 1, 2025 at 12:00 PM
// Authentication service for the healthcare communication platform

/// <reference types="vite/client" />

export interface User {
  id: number;
  email: string;
  firstName: string;
  lastName: string;
  role: string;
  fullName: string;
}

export interface LoginRequest {
  emailOrUsername: string;
  password: string;
}

export interface RegisterRequest {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
  role: number;
}

export interface AuthResponse {
  token: string;
  user: User;
}

export interface Role {
  id: number;
  name: string;
  description: string;
}

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5147/api';

class AuthService {
  private readonly TOKEN_KEY = 'authToken';
  private readonly USER_KEY = 'authUser';

  /**
   * Login user with email/username and password
   */
  async login(credentials: LoginRequest): Promise<AuthResponse> {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Login failed');
    }

    const data: AuthResponse = await response.json();
    
    // Store token and user data
    localStorage.setItem(this.TOKEN_KEY, data.token);
    localStorage.setItem(this.USER_KEY, JSON.stringify(data.user));
    
    return data;
  }

  /**
   * Register new user
   */
  async register(userData: RegisterRequest): Promise<void> {
    const response = await fetch(`${API_BASE_URL}/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Registration failed');
    }

    return await response.json();
  }

  /**
   * Get available user roles
   */
  async getRoles(): Promise<Role[]> {
    const response = await fetch(`${API_BASE_URL}/auth/roles`);
    
    if (!response.ok) {
      throw new Error('Failed to fetch roles');
    }

    return await response.json();
  }

  /**
   * Logout user
   */
  logout(): void {
    localStorage.removeItem(this.TOKEN_KEY);
    localStorage.removeItem(this.USER_KEY);
  }

  /**
   * Get current auth token
   */
  getToken(): string | null {
    return localStorage.getItem(this.TOKEN_KEY);
  }

  /**
   * Get current user
   */
  getCurrentUser(): User | null {
    const userStr = localStorage.getItem(this.USER_KEY);
    return userStr ? JSON.parse(userStr) : null;
  }

  /**
   * Check if user is authenticated
   */
  isAuthenticated(): boolean {
    const token = this.getToken();
    const user = this.getCurrentUser();
    return !!(token && user);
  }

  /**
   * Get authorization header for API requests
   */
  getAuthHeader(): { Authorization: string } | Record<string, never> {
    const token = this.getToken();
    return token ? { Authorization: `Bearer ${token}` } : {};
  }

  /**
   * Check if current user has a specific role
   */
  hasRole(role: string): boolean {
    const user = this.getCurrentUser();
    return user?.role === role;
  }

  /**
   * Check if current user is a patient
   */
  isPatient(): boolean {
    return this.hasRole('Patient');
  }

  /**
   * Check if current user is a provider
   */
  isProvider(): boolean {
    return this.hasRole('Provider');
  }

  /**
   * Check if current user is a family member
   */
  isFamily(): boolean {
    return this.hasRole('Family');
  }
}

export const authService = new AuthService();
export default authService;
