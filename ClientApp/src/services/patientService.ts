// Generated by Copilot - September 1, 2025 at 2:10 PM
import { API_BASE_URL } from '../config/environment';

// Type definitions for Patient-related operations
export interface Patient {
  id: number;
  name: string;
  age: number;
  status: 'Stable' | 'Improving' | 'Critical' | 'UnderReview' | 'Discharged';
  lastVisitDate: string | null;
  primaryCareManager: string | null;
  unacknowledgedAlertsCount: number;
  phoneNumber: string;
  email: string;
}

export interface PatientDetail {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  dateOfBirth: string;
  gender: 'Female' | 'Male' | 'Other' | 'PreferNotToSay';
  phoneNumber: string;
  address: string;
  city: string;
  state: string;
  postalCode: string;
  bloodType?: string;
  allergies?: string;
  currentMedications?: string;
  medicalHistory?: string;
  status: 'Stable' | 'Improving' | 'Critical' | 'UnderReview' | 'Discharged';
  lastVisitDate?: string;
  primaryCareManagerId?: number;
  primaryCareManager?: string;
  emergencyContactName: string;
  emergencyContactPhone: string;
  emergencyContactRelationship: string;
  createdAt: string;
  updatedAt: string;
}

export interface PatientAlert {
  id: number;
  type: 'Info' | 'Warning' | 'Critical';
  message: string;
  isAcknowledged: boolean;
  priority: number;
  createdAt: string;
  acknowledgedAt?: string;
  acknowledgedBy?: string;
}

export interface CareTask {
  id: number;
  title: string;
  description?: string;
  status: 'Pending' | 'InProgress' | 'Completed' | 'Cancelled';
  dueDate?: string;
  priority: number;
  assignedTo?: string;
  createdBy: string;
  createdAt: string;
  completedAt?: string;
}

export interface CreatePatientRequest {
  firstName: string;
  lastName: string;
  email: string;
  dateOfBirth: string;
  gender: 'Female' | 'Male' | 'Other' | 'PreferNotToSay';
  phoneNumber: string;
  address: string;
  city: string;
  state: string;
  postalCode: string;
  bloodType?: string;
  allergies?: string;
  currentMedications?: string;
  medicalHistory?: string;
  emergencyContactName: string;
  emergencyContactPhone: string;
  emergencyContactRelationship: string;
  primaryCareManagerId?: number;
}

export interface UpdatePatientRequest extends CreatePatientRequest {
  status: 'Stable' | 'Improving' | 'Critical' | 'UnderReview' | 'Discharged';
}

export interface PatientsResponse {
  patients: Patient[];
  totalCount: number;
  page: number;
  pageSize: number;
  totalPages: number;
}

class PatientService {
  /**
   * Get all patients with pagination
   */
  async getPatients(page = 1, pageSize = 10): Promise<PatientsResponse> {
    const response = await fetch(`${API_BASE_URL}/patient?page=${page}&pageSize=${pageSize}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.getAuthHeaders(),
      },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Failed to fetch patients');
    }

    return await response.json();
  }

  /**
   * Get a specific patient by ID
   */
  async getPatient(id: number): Promise<PatientDetail> {
    const response = await fetch(`${API_BASE_URL}/patient/${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.getAuthHeaders(),
      },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Failed to fetch patient');
    }

    return await response.json();
  }

  /**
   * Create a new patient
   */
  async createPatient(patientData: CreatePatientRequest): Promise<{ id: number; message: string }> {
    try {
      const response = await fetch(`${API_BASE_URL}/patient`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...this.getAuthHeaders(),
        },
        body: JSON.stringify(patientData),
      });

      if (!response.ok) {
        let errorMessage = 'Failed to create patient';
        try {
          const errorData = await response.text();
          errorMessage = errorData || errorMessage;
        } catch {
          // If we can't parse the error, use the default message
        }
        throw new Error(`${response.status}: ${errorMessage}`);
      }

      const result = await response.json();
      console.log('Patient created successfully:', result);
      return result;
    } catch (error) {
      console.error('Error in createPatient:', error);
      throw error;
    }
  }

  /**
   * Update an existing patient
   */
  async updatePatient(id: number, patientData: UpdatePatientRequest): Promise<{ message: string }> {
    const response = await fetch(`${API_BASE_URL}/patient/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        ...this.getAuthHeaders(),
      },
      body: JSON.stringify(patientData),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Failed to update patient');
    }

    return await response.json();
  }

  /**
   * Get patient alerts
   */
  async getPatientAlerts(patientId: number): Promise<PatientAlert[]> {
    const response = await fetch(`${API_BASE_URL}/patient/${patientId}/alerts`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.getAuthHeaders(),
      },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Failed to fetch patient alerts');
    }

    return await response.json();
  }

  /**
   * Get patient care tasks
   */
  async getPatientTasks(patientId: number): Promise<CareTask[]> {
    const response = await fetch(`${API_BASE_URL}/patient/${patientId}/tasks`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.getAuthHeaders(),
      },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Failed to fetch patient tasks');
    }

    return await response.json();
  }

  /**
   * Get providers for care manager assignment
   */
  async getProviders(): Promise<{ id: number; name: string }[]> {
    const response = await fetch(`${API_BASE_URL}/auth/users?role=Provider`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...this.getAuthHeaders(),
      },
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error || 'Failed to fetch providers');
    }

    const users = await response.json();
    return users.map((user: { id: number; firstName: string; lastName: string }) => ({
      id: user.id,
      name: `${user.firstName} ${user.lastName}`,
    }));
  }

  /**
   * Get authorization headers for API requests
   */
  private getAuthHeaders(): { Authorization: string } | Record<string, never> {
    const token = localStorage.getItem('authToken');
    return token ? { Authorization: `Bearer ${token}` } : {};
  }
}

export const patientService = new PatientService();
