// Generated by Copilot on September 1, 2025

import React, { useState } from 'react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import Input from '../components/ui/Input';

// API configuration
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:5147/api';

// Type definitions for SMS results
interface SmsResult {
    PhoneNumber: string;
    Success: boolean;
    ErrorMessage: string;
}

interface SingleSmsResponse {
    type: 'single';
    success: boolean;
    message: string;
}

interface BulkSmsResponse {
    type: 'bulk';
    success: boolean;
    message: string;
    results: SmsResult[];
    summary: {
        TotalSent: number;
        TotalFailed: number;
        TotalRequested: number;
    };
}

type SmsResponseResult = SingleSmsResponse | BulkSmsResponse;

/// <summary>
/// SMS messaging page component for sending text messages
/// Allows sending messages to individual recipients or multiple recipients
/// </summary>
export const SmsPage: React.FC = () => {
    // State for form inputs
    const [phoneNumber, setPhoneNumber] = useState('');
    const [phoneNumbers, setPhoneNumbers] = useState('');
    const [message, setMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [results, setResults] = useState<SmsResponseResult | null>(null);
    const [error, setError] = useState('');
    const [activeTab, setActiveTab] = useState<'single' | 'bulk'>('single');

    /// <summary>
    /// Sends SMS to a single recipient
    /// </summary>
    const handleSendSingle = async (e: React.FormEvent) => {
        e.preventDefault();
        
        if (!phoneNumber.trim() || !message.trim()) {
            setError('Phone number and message are required');
            return;
        }

        setIsLoading(true);
        setError('');
        setResults(null);

        try {
            const token = localStorage.getItem('authToken');
            const response = await fetch(`${API_BASE_URL}/sms/send`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    phoneNumber: phoneNumber.trim(),
                    message: message.trim()
                })
            });

            const data = await response.json();

            setResults({ type: 'single', success: true, message: data.Message });
            setPhoneNumber('');
            setMessage('');
        } catch (err) {
            setError('Network error occurred');
            console.error('SMS send error:', err);
        } finally {
            setIsLoading(false);
        }
    };

    /// <summary>
    /// Sends SMS to multiple recipients
    /// </summary>
    const handleSendBulk = async (e: React.FormEvent) => {
        e.preventDefault();
        
        if (!phoneNumbers.trim() || !message.trim()) {
            setError('Phone numbers and message are required');
            return;
        }

        // Parse phone numbers from textarea (one per line or comma-separated)
        const numbersArray = phoneNumbers
            .split(/[\n,]/)
            .map(num => num.trim())
            .filter(num => num.length > 0);

        if (numbersArray.length === 0) {
            setError('Please provide at least one valid phone number');
            return;
        }

        setIsLoading(true);
        setError('');
        setResults(null);

        try {
            const token = localStorage.getItem('authToken');
            const response = await fetch(`${API_BASE_URL}/sms/send-bulk`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    phoneNumbers: numbersArray,
                    message: message.trim()
                })
            });

            const data = await response.json();

            if (response.ok && data.Success) {
                setResults({ 
                    type: 'bulk', 
                    success: true, 
                    message: data.Message,
                    results: data.Results,
                    summary: data.Summary
                });
                setPhoneNumbers('');
                setMessage('');
            } else {
                setError(data.Message || 'Failed to send bulk SMS');
            }
        } catch (err) {
            setError('Network error occurred');
            console.error('Bulk SMS send error:', err);
        } finally {
            setIsLoading(false);
        }
    };

    /// <summary>
    /// Renders the results section based on response type
    /// </summary>
    const renderResults = () => {
        if (!results) return null;

        return (
            <Card className="mt-4">
                <div className="p-4">
                    <h3 className="text-lg font-semibold mb-2 text-green-600">
                        {results.success ? '✓ Success' : '✗ Failed'}
                    </h3>
                    <p className="text-gray-700 mb-3">{results.message}</p>
                    
                    {results.type === 'bulk' && results.summary && (
                        <div className="mb-4 p-3 bg-gray-50 rounded">
                            <h4 className="font-medium mb-2">Summary:</h4>
                            <div className="grid grid-cols-3 gap-4 text-sm">
                                <div>
                                    <span className="text-green-600 font-medium">Sent: </span>
                                    {results.summary.TotalSent}
                                </div>
                                <div>
                                    <span className="text-red-600 font-medium">Failed: </span>
                                    {results.summary.TotalFailed}
                                </div>
                                <div>
                                    <span className="text-gray-600 font-medium">Total: </span>
                                    {results.summary.TotalRequested}
                                </div>
                            </div>
                        </div>
                    )}

                    {results.type === 'bulk' && results.results && (
                        <div>
                            <h4 className="font-medium mb-2">Detailed Results:</h4>
                            <div className="max-h-40 overflow-y-auto">
                                {results.results.map((result: SmsResult, index: number) => (
                                    <div key={index} className={`p-2 mb-1 rounded text-sm ${
                                        result.Success ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'
                                    }`}>
                                        <span className="font-medium">{result.PhoneNumber}</span>
                                        <span className="ml-2">
                                            {result.Success ? '✓ Sent' : `✗ ${result.ErrorMessage}`}
                                        </span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            </Card>
        );
    };

    return (
        <div className="max-w-4xl mx-auto p-6">
            <h1 className="text-3xl font-bold text-gray-900 mb-6">SMS Messaging</h1>
            
            {/* Tab Navigation */}
            <div className="mb-6">
                <div className="border-b border-gray-200">
                    <nav className="-mb-px flex space-x-8">
                        <button
                            onClick={() => setActiveTab('single')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${
                                activeTab === 'single'
                                    ? 'border-blue-500 text-blue-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                            }`}
                        >
                            Send to One
                        </button>
                        <button
                            onClick={() => setActiveTab('bulk')}
                            className={`py-2 px-1 border-b-2 font-medium text-sm ${
                                activeTab === 'bulk'
                                    ? 'border-blue-500 text-blue-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                            }`}
                        >
                            Send to All
                        </button>
                    </nav>
                </div>
            </div>

            {/* Error Display */}
            {error && (
                <div className="mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
                    <p className="text-red-800">{error}</p>
                </div>
            )}

            {/* Single SMS Form */}
            {activeTab === 'single' && (
                <Card>
                    <div className="p-6">
                        <h2 className="text-xl font-semibold mb-4">Send SMS to One Recipient</h2>
                        <form onSubmit={handleSendSingle} className="space-y-4">
                            <div>
                                <label htmlFor="phoneNumber" className="block text-sm font-medium text-gray-700 mb-1">
                                    Phone Number
                                </label>
                                <Input
                                    id="phoneNumber"
                                    type="tel"
                                    value={phoneNumber}
                                    onChange={(e) => setPhoneNumber(e.target.value)}
                                    placeholder="e.g., +1234567890 or 94755629921"
                                    className="w-full"
                                    disabled={isLoading}
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    Enter phone number in international format (with country code)
                                </p>
                            </div>
                            
                            <div>
                                <label htmlFor="singleMessage" className="block text-sm font-medium text-gray-700 mb-1">
                                    Message
                                </label>
                                <textarea
                                    id="singleMessage"
                                    value={message}
                                    onChange={(e) => setMessage(e.target.value)}
                                    placeholder="Enter your message here..."
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    rows={4}
                                    maxLength={1600}
                                    disabled={isLoading}
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    {message.length}/1600 characters
                                </p>
                            </div>
                            
                            <Button
                                type="submit"
                                disabled={isLoading || !phoneNumber.trim() || !message.trim()}
                                className="w-full"
                            >
                                {isLoading ? 'Sending...' : 'Send SMS'}
                            </Button>
                        </form>
                    </div>
                </Card>
            )}

            {/* Bulk SMS Form */}
            {activeTab === 'bulk' && (
                <Card>
                    <div className="p-6">
                        <h2 className="text-xl font-semibold mb-4">Send SMS to Multiple Recipients</h2>
                        <form onSubmit={handleSendBulk} className="space-y-4">
                            <div>
                                <label htmlFor="phoneNumbers" className="block text-sm font-medium text-gray-700 mb-1">
                                    Phone Numbers
                                </label>
                                <textarea
                                    id="phoneNumbers"
                                    value={phoneNumbers}
                                    onChange={(e) => setPhoneNumbers(e.target.value)}
                                    placeholder="Enter phone numbers (one per line or comma-separated)&#10;e.g.:&#10;+1234567890&#10;94755629921&#10;+44123456789"
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    rows={6}
                                    disabled={isLoading}
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    Enter one phone number per line or separate with commas
                                </p>
                            </div>
                            
                            <div>
                                <label htmlFor="bulkMessage" className="block text-sm font-medium text-gray-700 mb-1">
                                    Message
                                </label>
                                <textarea
                                    id="bulkMessage"
                                    value={message}
                                    onChange={(e) => setMessage(e.target.value)}
                                    placeholder="Enter your message here..."
                                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                                    rows={4}
                                    maxLength={1600}
                                    disabled={isLoading}
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    {message.length}/1600 characters
                                </p>
                            </div>
                            
                            <Button
                                type="submit"
                                disabled={isLoading || !phoneNumbers.trim() || !message.trim()}
                                className="w-full"
                            >
                                {isLoading ? 'Sending to All...' : 'Send to All'}
                            </Button>
                        </form>
                    </div>
                </Card>
            )}

            {/* Results Display */}
            {renderResults()}
        </div>
    );
};
