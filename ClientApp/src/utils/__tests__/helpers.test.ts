// Generated by Copilot - September 1, 2025 at 3:10 PM
import {
  calculateAge,
  formatDate,
  getStatusColor,
  validateEmail,
  validatePhoneNumber,
  validateRequired,
  filterPatients
} from '../helpers';

describe('Utility Functions', () => {
  describe('calculateAge', () => {
    it('should calculate correct age for valid date', () => {
      const today = new Date();
      const birthYear = today.getFullYear() - 25;
      const birthDate = new Date(birthYear, today.getMonth(), today.getDate());
      
      expect(calculateAge(birthDate)).toBe(25);
    });

    it('should handle future birth dates', () => {
      const futureDate = new Date();
      futureDate.setFullYear(futureDate.getFullYear() + 1);
      
      expect(calculateAge(futureDate)).toBe(0);
    });

    it('should return -1 for invalid dates', () => {
      expect(calculateAge('invalid-date')).toBe(-1);
      expect(calculateAge('')).toBe(-1);
    });

    it('should handle string dates', () => {
      expect(calculateAge('1990-01-01')).toBeGreaterThan(30);
    });
  });

  describe('formatDate', () => {
    it('should format valid dates correctly', () => {
      const date = new Date('2025-01-15');
      const formatted = formatDate(date);
      
      expect(formatted).toMatch(/Jan 15, 2025/);
    });

    it('should handle null dates', () => {
      expect(formatDate(null)).toBe('N/A');
    });

    it('should handle invalid dates', () => {
      expect(formatDate('invalid-date')).toBe('Invalid Date');
    });

    it('should handle string dates', () => {
      const formatted = formatDate('2025-01-01');
      expect(formatted).toMatch(/Jan 1, 2025/);
    });
  });

  describe('getStatusColor', () => {
    it('should return correct colors for all statuses', () => {
      expect(getStatusColor('critical')).toBe('bg-red-100 text-red-800');
      expect(getStatusColor('stable')).toBe('bg-green-100 text-green-800');
      expect(getStatusColor('improving')).toBe('bg-blue-100 text-blue-800');
      expect(getStatusColor('underreview')).toBe('bg-yellow-100 text-yellow-800');
      expect(getStatusColor('discharged')).toBe('bg-gray-100 text-gray-800');
    });

    it('should handle case insensitive input', () => {
      expect(getStatusColor('CRITICAL')).toBe('bg-red-100 text-red-800');
      expect(getStatusColor('Stable')).toBe('bg-green-100 text-green-800');
    });

    it('should return default color for unknown status', () => {
      expect(getStatusColor('unknown')).toBe('bg-gray-100 text-gray-800');
      expect(getStatusColor('')).toBe('bg-gray-100 text-gray-800');
    });
  });

  describe('validateEmail', () => {
    it('should validate correct email addresses', () => {
      expect(validateEmail('test@example.com')).toBe(true);
      expect(validateEmail('user.name+tag@domain.co.uk')).toBe(true);
    });

    it('should reject invalid email addresses', () => {
      expect(validateEmail('invalid-email')).toBe(false);
      expect(validateEmail('@example.com')).toBe(false);
      expect(validateEmail('test@')).toBe(false);
      expect(validateEmail('')).toBe(false);
    });
  });

  describe('validatePhoneNumber', () => {
    it('should validate correct phone numbers', () => {
      expect(validatePhoneNumber('1234567890')).toBe(true);
      expect(validatePhoneNumber('+1234567890')).toBe(true);
      expect(validatePhoneNumber('123-456-7890')).toBe(true);
      expect(validatePhoneNumber('(123) 456-7890')).toBe(true);
    });

    it('should reject invalid phone numbers', () => {
      expect(validatePhoneNumber('')).toBe(false);
      expect(validatePhoneNumber('abc')).toBe(false);
      expect(validatePhoneNumber('0123456789')).toBe(false); // Starts with 0
    });
  });

  describe('validateRequired', () => {
    it('should validate non-empty strings', () => {
      expect(validateRequired('test')).toBe(true);
      expect(validateRequired('  test  ')).toBe(true);
    });

    it('should reject empty or whitespace strings', () => {
      expect(validateRequired('')).toBe(false);
      expect(validateRequired('   ')).toBe(false);
      expect(validateRequired('\t\n')).toBe(false);
    });
  });

  describe('filterPatients', () => {
    const mockPatients = [
      {
        id: 1,
        name: 'John Doe',
        status: 'Stable',
        primaryCareManager: 'Dr. Smith',
        email: 'john@example.com'
      },
      {
        id: 2,
        name: 'Jane Smith',
        status: 'Critical',
        primaryCareManager: 'Dr. Jones',
        email: 'jane@example.com'
      }
    ];

    it('should return all patients when no search term', () => {
      expect(filterPatients(mockPatients, '')).toEqual(mockPatients);
    });

    it('should filter by patient name', () => {
      const result = filterPatients(mockPatients, 'John');
      expect(result).toHaveLength(1);
      expect(result[0].name).toBe('John Doe');
    });

    it('should filter by status', () => {
      const result = filterPatients(mockPatients, 'Critical');
      expect(result).toHaveLength(1);
      expect(result[0].status).toBe('Critical');
    });

    it('should filter by care manager', () => {
      const result = filterPatients(mockPatients, 'Dr. Smith');
      expect(result).toHaveLength(1);
      expect(result[0].primaryCareManager).toBe('Dr. Smith');
    });

    it('should filter by email', () => {
      const result = filterPatients(mockPatients, 'jane@example.com');
      expect(result).toHaveLength(1);
      expect(result[0].email).toBe('jane@example.com');
    });

    it('should be case insensitive', () => {
      const result = filterPatients(mockPatients, 'JOHN');
      expect(result).toHaveLength(1);
      expect(result[0].name).toBe('John Doe');
    });

    it('should return empty array when no matches', () => {
      const result = filterPatients(mockPatients, 'NonExistent');
      expect(result).toHaveLength(0);
    });
  });
});
