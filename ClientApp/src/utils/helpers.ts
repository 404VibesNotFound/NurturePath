// Generated by Copilot - September 1, 2025 at 3:10 PM
// Utility functions for testing and application logic

// Age calculation utility (extracted from PatientController logic)
export const calculateAge = (dateOfBirth: string | Date): number => {
  const today = new Date();
  const birthDate = new Date(dateOfBirth);
  
  if (isNaN(birthDate.getTime())) {
    return -1; // Invalid date
  }
  
  let age = today.getFullYear() - birthDate.getFullYear();
  const monthDiff = today.getMonth() - birthDate.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
    age--;
  }
  
  return Math.max(0, age); // Ensure non-negative age
};

// Format date utility
export const formatDate = (date: string | Date | null): string => {
  if (!date) return 'N/A';
  
  try {
    const dateObj = new Date(date);
    if (isNaN(dateObj.getTime())) return 'Invalid Date';
    
    return dateObj.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  } catch {
    return 'Invalid Date';
  }
};

// Patient status color utility
export const getStatusColor = (status: string): string => {
  switch (status.toLowerCase()) {
    case 'critical':
      return 'bg-red-100 text-red-800';
    case 'stable':
      return 'bg-green-100 text-green-800';
    case 'improving':
      return 'bg-blue-100 text-blue-800';
    case 'underreview':
      return 'bg-yellow-100 text-yellow-800';
    case 'discharged':
      return 'bg-gray-100 text-gray-800';
    default:
      return 'bg-gray-100 text-gray-800';
  }
};

// Validation utilities
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export const validatePhoneNumber = (phone: string): boolean => {
  const phoneRegex = /^[+]?[1-9][\d]{0,15}$/;
  return phoneRegex.test(phone.replace(/\s|-|\(|\)/g, ''));
};

export const validateRequired = (value: string): boolean => {
  return value.trim().length > 0;
};

// Search/filter utility
export const filterPatients = (
  patients: Array<{ 
    name?: string; 
    email?: string; 
    phone?: string; 
    status?: string; 
    primaryCareManager?: string; 
    [key: string]: unknown 
  }>, 
  searchTerm: string
) => {
  if (!searchTerm) return patients;
  
  const term = searchTerm.toLowerCase();
  return patients.filter(patient => 
    patient.name?.toLowerCase().includes(term) ||
    patient.status?.toLowerCase().includes(term) ||
    patient.primaryCareManager?.toLowerCase().includes(term) ||
    patient.email?.toLowerCase().includes(term)
  );
};
