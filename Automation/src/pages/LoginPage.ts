// Generated by Copilot - September 1, 2025 at 5:08 PM
// Login Page Object Model
import { Page, Locator, expect } from '@playwright/test';
import { BasePage } from './BasePage';
import { config, getCredentials } from '../../config/test-config';

export class LoginPage extends BasePage {
  // Page elements
  private readonly emailInput: Locator;
  private readonly passwordInput: Locator;
  private readonly submitButton: Locator;
  private readonly errorMessage: Locator;
  private readonly rememberMeCheckbox: Locator;
  private readonly forgotPasswordLink: Locator;
  private readonly signupLink: Locator;
  private readonly welcomeTitle: Locator;

  constructor(page: Page) {
    super(page, '/login');
    
    // Initialize locators
    this.emailInput = page.locator(config.selectors.login.emailInput);
    this.passwordInput = page.locator(config.selectors.login.passwordInput);
    this.submitButton = page.locator(config.selectors.login.submitButton);
    this.errorMessage = page.locator(config.selectors.login.errorMessage);
    this.rememberMeCheckbox = page.locator(config.selectors.login.rememberMeCheckbox);
    this.forgotPasswordLink = page.locator(config.selectors.login.forgotPasswordLink);
    this.signupLink = page.locator(config.selectors.login.signupLink);
    this.welcomeTitle = page.locator('h1:has-text("Welcome Back")');
  }

  /**
   * Navigate to login page and verify it loaded
   */
  async navigateToLogin(): Promise<void> {
    await this.goto();
    await this.verifyLoginPageLoaded();
  }

  /**
   * Verify that the login page has loaded correctly
   */
  async verifyLoginPageLoaded(): Promise<void> {
    // Wait for page elements to be visible
    await expect(this.welcomeTitle).toBeVisible({ timeout: config.timeouts.assertion });
    await expect(this.emailInput).toBeVisible();
    await expect(this.passwordInput).toBeVisible();
    await expect(this.submitButton).toBeVisible();
    
    // Verify page title
    await expect(this.page).toHaveTitle(/NurturePath|Welcome|Login/i);
  }

  /**
   * Fill email/username field
   */
  async fillEmail(email: string): Promise<void> {
    await this.emailInput.waitFor({ state: 'visible' });
    await this.emailInput.clear();
    await this.emailInput.fill(email);
    
    // Verify the value was entered correctly
    await expect(this.emailInput).toHaveValue(email);
  }

  /**
   * Fill password field
   */
  async fillPassword(password: string): Promise<void> {
    await this.passwordInput.waitFor({ state: 'visible' });
    await this.passwordInput.clear();
    await this.passwordInput.fill(password);
    
    // Verify the password field is not empty (can't check actual value for security)
    await expect(this.passwordInput).not.toHaveValue('');
  }

  /**
   * Click the submit button
   */
  async clickSubmit(): Promise<void> {
    await this.submitButton.waitFor({ state: 'visible' });
    await expect(this.submitButton).toBeEnabled();
    await this.submitButton.click();
  }

  /**
   * Toggle remember me checkbox
   */
  async toggleRememberMe(): Promise<void> {
    await this.rememberMeCheckbox.waitFor({ state: 'visible' });
    await this.rememberMeCheckbox.check();
  }

  /**
   * Perform complete login with credentials
   */
  async login(email: string, password: string, rememberMe: boolean = false): Promise<void> {
    await this.fillEmail(email);
    await this.fillPassword(password);
    
    if (rememberMe) {
      await this.toggleRememberMe();
    }
    
    // Click submit and wait for navigation
    const navigationPromise = this.page.waitForURL('**/dashboard**', {
      timeout: config.timeouts.navigation
    });
    
    await this.clickSubmit();
    await navigationPromise;
  }

  /**
   * Login with predefined test credentials
   */
  async loginWithTestCredentials(role: 'admin' | 'provider' | 'family' = 'admin'): Promise<void> {
    const credentials = getCredentials(role);
    await this.login(credentials.email, credentials.password);
  }

  /**
   * Attempt login with invalid credentials
   */
  async attemptInvalidLogin(): Promise<void> {
    const invalidCreds = getCredentials('invalid');
    await this.fillEmail(invalidCreds.email);
    await this.fillPassword(invalidCreds.password);
    await this.clickSubmit();
    
    // Wait for error message to appear
    await this.waitForErrorMessage();
  }

  /**
   * Wait for and verify error message is displayed
   */
  async waitForErrorMessage(): Promise<void> {
    await expect(this.errorMessage).toBeVisible({ timeout: config.timeouts.assertion });
  }

  /**
   * Get error message text
   */
  async getErrorMessage(): Promise<string> {
    await this.waitForErrorMessage();
    return await this.errorMessage.textContent() || '';
  }

  /**
   * Verify error message contains expected text
   */
  async verifyErrorMessage(expectedText: string): Promise<void> {
    await this.waitForErrorMessage();
    await expect(this.errorMessage).toContainText(expectedText);
  }

  /**
   * Click the forgot password link
   */
  async clickForgotPassword(): Promise<void> {
    await this.forgotPasswordLink.click();
  }

  /**
   * Click the signup link
   */
  async clickSignupLink(): Promise<void> {
    await this.signupLink.click();
  }

  /**
   * Verify submit button shows loading state
   */
  async verifySubmitButtonLoading(): Promise<void> {
    await expect(this.submitButton).toContainText(/Signing In.../i);
    await expect(this.submitButton).toBeDisabled();
  }

  /**
   * Wait for login to complete (either success or failure)
   */
  async waitForLoginCompletion(): Promise<void> {
    // Wait for either navigation to dashboard or error message
    await Promise.race([
      this.page.waitForURL('**/dashboard**', { timeout: config.timeouts.navigation }),
      this.errorMessage.waitFor({ state: 'visible', timeout: config.timeouts.assertion })
    ]);
  }

  /**
   * Check if login was successful (redirected to dashboard)
   */
  async isLoginSuccessful(): Promise<boolean> {
    try {
      await this.page.waitForURL('**/dashboard**', { timeout: 5000 });
      return true;
    } catch {
      return false;
    }
  }
}
