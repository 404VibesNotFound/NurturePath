// Generated by Copilot - September 1, 2025 at 5:08 PM
// Base Page Object Model for common functionality
import { Page, Locator, expect } from '@playwright/test';
import { config } from '../../config/test-config';

export abstract class BasePage {
  protected page: Page;
  protected url: string;

  constructor(page: Page, url: string = '') {
    this.page = page;
    this.url = url;
  }

  /**
   * Navigate to the page
   */
  async goto(): Promise<void> {
    await this.page.goto(this.url, {
      waitUntil: 'networkidle',
      timeout: config.timeouts.navigation
    });
  }

  /**
   * Wait for page to be loaded
   */
  async waitForPageLoad(): Promise<void> {
    await this.page.waitForLoadState('networkidle', {
      timeout: config.timeouts.navigation
    });
  }

  /**
   * Wait for an element to be visible
   */
  async waitForElement(selector: string, timeout: number = config.timeouts.assertion): Promise<Locator> {
    const element = this.page.locator(selector);
    await element.waitFor({ state: 'visible', timeout });
    return element;
  }

  /**
   * Wait for an element to be hidden
   */
  async waitForElementToHide(selector: string, timeout: number = config.timeouts.assertion): Promise<void> {
    const element = this.page.locator(selector);
    await element.waitFor({ state: 'hidden', timeout });
  }

  /**
   * Check if an element exists on the page
   */
  async elementExists(selector: string): Promise<boolean> {
    return await this.page.locator(selector).count() > 0;
  }

  /**
   * Get page title
   */
  async getTitle(): Promise<string> {
    return await this.page.title();
  }

  /**
   * Get current URL
   */
  getCurrentUrl(): string {
    return this.page.url();
  }

  /**
   * Take a screenshot
   */
  async takeScreenshot(name: string): Promise<void> {
    await this.page.screenshot({
      path: `./reports/screenshots/${name}-${Date.now()}.png`,
      fullPage: true
    });
  }

  /**
   * Wait for loading spinner to disappear
   */
  async waitForLoadingToComplete(): Promise<void> {
    const loadingSpinner = this.page.locator(config.selectors.common.loadingSpinner);
    
    // Wait for spinner to appear (optional)
    try {
      await loadingSpinner.waitFor({ state: 'visible', timeout: 2000 });
    } catch {
      // Spinner might not appear for fast operations
    }
    
    // Wait for spinner to disappear
    await loadingSpinner.waitFor({ state: 'hidden', timeout: config.timeouts.assertion });
  }

  /**
   * Verify no error messages are displayed
   */
  async verifyNoErrors(): Promise<void> {
    const errorElements = this.page.locator(config.selectors.common.errorBanner);
    await expect(errorElements).toHaveCount(0);
  }

  /**
   * Wait for page navigation
   */
  async waitForNavigation(expectedUrl?: string): Promise<void> {
    await this.page.waitForURL(expectedUrl || '**/*', {
      timeout: config.timeouts.navigation
    });
  }
}
