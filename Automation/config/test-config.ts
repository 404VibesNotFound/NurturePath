// Generated by Copilot - September 1, 2025 at 5:08 PM
// Test configuration constants and settings

export const config = {
  // Base URLs for different environments
  urls: {
    production: 'https://nuturepath.netlify.app/',
    staging: 'https://staging.nuturepath.netlify.app/', // If available
    local: 'http://localhost:3000'
  },

  // Timeout configurations (in milliseconds)
  timeouts: {
    // Standard timeout for most actions (clicks, form fills, etc.)
    action: 30000,
    
    // Navigation timeout for page loads
    navigation: 60000,
    
    // Short timeout for quick checks and assertions
    assertion: 10000,
    
    // Long timeout for complex operations like file uploads
    longRunning: 120000
  },

  // Test data and credentials
  testData: {
    // Valid admin/provider credentials for testing
    validCredentials: {
      email: 'test@test.com',
      username: 'test@test.com',
      password: 'password',
      role: 'Patient' // Based on the migration data, test@test.com is a Patient
    },
    
    // Provider credentials (from migration data)
    providerCredentials: {
      email: 'dr.johnson@healthcare.com',
      username: 'dr.johnson@healthcare.com',
      password: 'password', // Note: This is a test password, real one would be hashed
      role: 'Provider'
    },
    
    // Family member credentials (from migration data)
    familyCredentials: {
      email: 'mary.smith@family.com',
      username: 'mary.smith@family.com',
      password: 'password',
      role: 'Family'
    },

    // Invalid credentials for negative testing
    invalidCredentials: {
      email: 'invalid@email.com',
      password: 'wrongpassword'
    }
  },

  // UI element selectors and identifiers
  selectors: {
    // Login page elements
    login: {
      emailInput: 'input[name="emailOrUsername"]',
      passwordInput: 'input[name="password"]',
      submitButton: 'button[type="submit"]:has-text("Sign In")',
      errorMessage: '.bg-red-50',
      rememberMeCheckbox: 'input[name="remember-me"]',
      forgotPasswordLink: 'a[href="/forgot-password"]',
      signupLink: 'a[href="/signup"]'
    },

    // Dashboard elements
    dashboard: {
      welcomeMessage: 'h1:has-text("Dashboard Overview")',
      userGreeting: 'p:has-text("Welcome back")',
      navigationMenu: '[role="navigation"]',
      logoutButton: 'button:has-text("Logout")',
      
      // Dashboard cards
      totalPatientsCard: '.border-l-4.border-\\[\\#4c146c\\]',
      appointmentsCard: '.border-l-4.border-\\[\\#b083f7\\]',
      alertsCard: '.border-l-4.border-\\[\\#dd6b20\\]',
      
      // Navigation items
      careCoordinationNav: 'a[href*="care-coordination"]',
      messagesNav: 'a[href*="messages"]',
      vaccinesNav: 'a[href*="vaccines"]',
      settingsNav: 'a[href*="settings"]'
    },

    // Common elements
    common: {
      loadingSpinner: '.animate-spin',
      errorBanner: '[role="alert"]',
      successMessage: '.bg-green-50',
      modal: '[role="dialog"]',
      modalCloseButton: 'button[aria-label="Close"]'
    }
  },

  // Test environment settings
  environment: {
    // Determines if we're running in CI/CD
    isCI: !!process.env.CI,
    
    // Current environment (production, staging, local)
    current: process.env.TEST_ENV || 'production',
    
    // Debug mode settings
    debug: process.env.DEBUG === 'true',
    
    // Headless mode (can be overridden per test)
    headless: process.env.HEADLESS !== 'false'
  }
};

// Helper function to get current base URL
export function getBaseUrl(): string {
  const env = config.environment.current;
  return config.urls[env as keyof typeof config.urls] || config.urls.production;
}

// Helper function to get test credentials based on role
export function getCredentials(role: 'admin' | 'provider' | 'family' | 'invalid' = 'admin') {
  switch (role) {
    case 'provider':
      return config.testData.providerCredentials;
    case 'family':
      return config.testData.familyCredentials;
    case 'invalid':
      return config.testData.invalidCredentials;
    default:
      return config.testData.validCredentials;
  }
}
