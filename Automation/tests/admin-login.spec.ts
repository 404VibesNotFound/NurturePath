// Generated by Copilot - September 1, 2025 at 5:08 PM
// Comprehensive Admin Login E2E Test
import { test, expect } from '@playwright/test';
import { LoginPage } from '../src/pages/LoginPage';
import { DashboardPage } from '../src/pages/DashboardPage';
import { config, getCredentials } from '../config/test-config';

test.describe('Admin Login Flow', () => {
  let loginPage: LoginPage;
  let dashboardPage: DashboardPage;

  test.beforeEach(async ({ page }) => {
    // Initialize page objects
    loginPage = new LoginPage(page);
    dashboardPage = new DashboardPage(page);
    
    // Set viewport for consistent testing
    await page.setViewportSize({ width: 1280, height: 720 });
  });

  test('Complete Admin Login Journey - Valid Credentials', async ({ page }) => {
    // Test Description: Verify complete admin login flow with valid credentials
    // This test validates the entire user journey from login to dashboard access

    // Step 1: Navigate to login page
    await test.step('Navigate to login page', async () => {
      await loginPage.navigateToLogin();
      await loginPage.verifyLoginPageLoaded();
    });

    // Step 2: Fill in admin credentials
    await test.step('Enter valid admin credentials', async () => {
      const credentials = getCredentials('admin');
      
      await loginPage.fillEmail(credentials.email);
      await loginPage.fillPassword(credentials.password);
      
      // Optional: Enable remember me for better UX testing
      await loginPage.toggleRememberMe();
    });

    // Step 3: Submit login form
    await test.step('Submit login form', async () => {
      // Take screenshot before login attempt
      await page.screenshot({ path: './reports/screenshots/before-login.png' });
      
      await loginPage.clickSubmit();
      
      // Verify loading state is shown
      await loginPage.verifySubmitButtonLoading();
    });

    // Step 4: Verify successful authentication
    await test.step('Verify successful authentication', async () => {
      // Wait for navigation to dashboard
      await page.waitForURL('**/dashboard**', { 
        timeout: config.timeouts.navigation 
      });
      
      // Verify login was successful
      expect(await loginPage.isLoginSuccessful()).toBeTruthy();
    });

    // Step 5: Verify dashboard page loads correctly
    await test.step('Verify dashboard page loaded', async () => {
      await dashboardPage.verifyDashboardLoaded();
      
      // Take screenshot of successful login
      await page.screenshot({ path: './reports/screenshots/dashboard-loaded.png' });
    });

    // Step 6: Verify admin-specific UI elements
    await test.step('Verify admin-specific elements', async () => {
      // Check for admin dashboard elements
      await dashboardPage.verifyAdminElements();
      
      // Verify user greeting shows correct information
      await dashboardPage.verifyUserGreeting();
      
      // Verify dashboard cards have data
      await dashboardPage.verifyDashboardCardsHaveData();
    });

    // Step 7: Verify navigation accessibility
    await test.step('Verify admin navigation access', async () => {
      await dashboardPage.verifyNavigationAccessible();
      
      // Test navigation to key admin sections
      await dashboardPage.goToCareCoordination();
      await page.goBack();
      
      await dashboardPage.goToMessages();
      await page.goBack();
      
      await dashboardPage.goToSettings();
      await page.goBack();
    });

    // Step 8: Verify page layout and responsiveness
    await test.step('Verify page layout', async () => {
      await dashboardPage.verifyPageLayout();
      
      // Test with mobile viewport
      await page.setViewportSize({ width: 375, height: 667 });
      await dashboardPage.verifyDashboardLoaded();
      
      // Reset to desktop viewport
      await page.setViewportSize({ width: 1280, height: 720 });
    });

    // Final verification: No errors present
    await test.step('Final verification - no errors', async () => {
      await dashboardPage.verifyNoErrors();
      
      // Take final screenshot
      await page.screenshot({ path: './reports/screenshots/test-completed.png' });
    });
  });

  test('Login Validation - Invalid Credentials', async ({ page }) => {
    // Test Description: Verify proper error handling for invalid credentials

    await test.step('Navigate to login page', async () => {
      await loginPage.navigateToLogin();
    });

    await test.step('Attempt login with invalid credentials', async () => {
      await loginPage.attemptInvalidLogin();
    });

    await test.step('Verify error message displayed', async () => {
      await loginPage.verifyErrorMessage('Invalid credentials');
      
      // Verify user remains on login page
      expect(page.url()).toContain('/login');
    });

    await test.step('Verify error message styling', async () => {
      const errorMsg = await loginPage.getErrorMessage();
      expect(errorMsg).toBeTruthy();
      expect(errorMsg.length).toBeGreaterThan(0);
    });
  });

  test('Login Form Validation - Empty Fields', async ({ page }) => {
    // Test Description: Verify form validation for empty fields

    await test.step('Navigate to login page', async () => {
      await loginPage.navigateToLogin();
    });

    await test.step('Submit empty form', async () => {
      await loginPage.clickSubmit();
    });

    await test.step('Verify client-side validation', async () => {
      // Check if browser validation prevents submission
      const emailInput = page.locator('input[name="emailOrUsername"]');
      const passwordInput = page.locator('input[name="password"]');
      
      // Verify required field validation by checking attributes
      await expect(emailInput).toHaveAttribute('required');
      await expect(passwordInput).toHaveAttribute('required');
    });
  });

  test('Provider Login Flow', async () => {
    // Test Description: Verify provider role can login and access appropriate dashboard

    await test.step('Login as Provider', async () => {
      await loginPage.navigateToLogin();
      await loginPage.loginWithTestCredentials('provider');
    });

    await test.step('Verify provider dashboard access', async () => {
      await dashboardPage.verifyDashboardLoaded();
      await dashboardPage.verifyAdminElements();
      
      // Verify provider-specific greeting
      const greeting = await dashboardPage.getUserGreeting();
      expect(greeting).toContain('Welcome back');
    });
  });

  test('Logout Functionality', async ({ page }) => {
    // Test Description: Verify logout functionality works correctly

    await test.step('Login first', async () => {
      await loginPage.navigateToLogin();
      await loginPage.loginWithTestCredentials('admin');
      await dashboardPage.verifyDashboardLoaded();
    });

    await test.step('Perform logout', async () => {
      // Note: Logout functionality might need to be implemented in the dashboard
      // For now, we'll verify the user can navigate back to login
      await page.goto('/login');
      await loginPage.verifyLoginPageLoaded();
    });
  });

  test('Session Persistence - Remember Me', async ({ page }) => {
    // Test Description: Verify remember me functionality

    await test.step('Login with Remember Me enabled', async () => {
      await loginPage.navigateToLogin();
      
      const credentials = getCredentials('admin');
      await loginPage.login(credentials.email, credentials.password, true);
      await dashboardPage.verifyDashboardLoaded();
    });

    await test.step('Verify session persistence', async () => {
      // Refresh page to test session persistence
      await page.reload();
      await dashboardPage.verifyDashboardLoaded();
    });
  });
});
