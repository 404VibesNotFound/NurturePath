// Generated by Copilot on September 1, 2025

using System.Text.Json;

namespace ServerApp.Services
{
    /// <summary>
    /// SMS service implementation using Vonage (Nexmo) API
    /// Provides functionality to send SMS messages to individuals or groups
    /// </summary>
    public class VonageSmsService : ISmsService
    {
        private readonly HttpClient _httpClient;
        private readonly ILogger<VonageSmsService> _logger;
        private readonly string _apiKey;
        private readonly string _apiSecret;
        private readonly string _fromNumber;

        public VonageSmsService(HttpClient httpClient, ILogger<VonageSmsService> logger, IConfiguration configuration)
        {
            _httpClient = httpClient;
            _logger = logger;
            
            // Get configuration values - in production, use secure configuration
            _apiKey = configuration["Vonage:ApiKey"] ?? "691a38b6";
            _apiSecret = configuration["Vonage:ApiSecret"] ?? "MhF6LFwy6OF0QlG4";
            _fromNumber = configuration["Vonage:FromNumber"] ?? "Vonage APIs";
        }

        /// <summary>
        /// Sends an SMS message to a single recipient using Vonage API
        /// </summary>
        /// <param name="phoneNumber">The recipient's phone number in international format</param>
        /// <param name="message">The message content to send</param>
        /// <returns>Success status and any error messages</returns>
        public async Task<(bool Success, string ErrorMessage)> SendSmsAsync(string phoneNumber, string message)
        {
            try
            {
                _logger.LogInformation("Sending SMS to {PhoneNumber}", phoneNumber);

                // Prepare the request
                var request = new HttpRequestMessage(HttpMethod.Post, "https://rest.nexmo.com/sms/json");
                
                // Build form data collection
                var collection = new List<KeyValuePair<string, string>>
                {
                    new("api_key", _apiKey),
                    new("api_secret", _apiSecret),
                    new("from", _fromNumber),
                    new("to", phoneNumber),
                    new("text", message)
                };

                var content = new FormUrlEncodedContent(collection);
                request.Content = content;

                // Send the request
                var response = await _httpClient.SendAsync(request);
                var responseContent = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("SMS sent successfully to {PhoneNumber}. Response: {Response}", 
                        phoneNumber, responseContent);
                    return (true, string.Empty);
                }
                else
                {
                    _logger.LogError("Failed to send SMS to {PhoneNumber}. Status: {Status}, Response: {Response}", 
                        phoneNumber, response.StatusCode, responseContent);
                    return (false, $"HTTP {response.StatusCode}: {responseContent}");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception occurred while sending SMS to {PhoneNumber}", phoneNumber);
                return (false, $"Exception: {ex.Message}");
            }
        }

        /// <summary>
        /// Sends an SMS message to multiple recipients
        /// Processes each recipient individually to provide detailed results
        /// </summary>
        /// <param name="phoneNumbers">List of recipient phone numbers</param>
        /// <param name="message">The message content to send</param>
        /// <returns>Results for each recipient including success status and error messages</returns>
        public async Task<List<(string PhoneNumber, bool Success, string ErrorMessage)>> SendSmsToMultipleAsync(List<string> phoneNumbers, string message)
        {
            var results = new List<(string PhoneNumber, bool Success, string ErrorMessage)>();
            
            _logger.LogInformation("Sending SMS to {Count} recipients", phoneNumbers.Count);

            // Process each phone number individually for better error handling
            foreach (var phoneNumber in phoneNumbers)
            {
                var (success, errorMessage) = await SendSmsAsync(phoneNumber, message);
                results.Add((phoneNumber, success, errorMessage));
                
                // Add a small delay between requests to avoid rate limiting
                await Task.Delay(100);
            }

            var successCount = results.Count(r => r.Success);
            _logger.LogInformation("SMS batch complete: {SuccessCount}/{TotalCount} sent successfully", 
                successCount, phoneNumbers.Count);

            return results;
        }
    }
}
