// Generated by Copilot on September 1, 2025

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using ServerApp.Services;
using System.ComponentModel.DataAnnotations;

namespace ServerApp.Controllers
{
    /// <summary>
    /// Controller for SMS messaging functionality
    /// Provides endpoints for sending SMS messages to individuals or groups
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Require authentication for all SMS operations
    public class SmsController : ControllerBase
    {
        private readonly ISmsService _smsService;
        private readonly ILogger<SmsController> _logger;

        public SmsController(ISmsService smsService, ILogger<SmsController> logger)
        {
            _smsService = smsService;
            _logger = logger;
        }

        /// <summary>
        /// Sends an SMS message to a single recipient
        /// </summary>
        /// <param name="request">SMS request containing phone number and message</param>
        /// <returns>Result of the SMS send operation</returns>
        [HttpPost("send")]
        public async Task<IActionResult> SendSms([FromBody] SendSmsRequest request)
        {
            try
            {
                _logger.LogInformation("SMS send request from user {UserId} to {PhoneNumber}", 
                    User.Identity?.Name, request.PhoneNumber);

                // Validate the request
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                // Send the SMS
                var (success, errorMessage) = await _smsService.SendSmsAsync(request.PhoneNumber, request.Message);

                if (success)
                {
                    return Ok(new { Success = true, Message = "SMS sent successfully" });
                }
                else
                {
                    return BadRequest(new { Success = false, Message = errorMessage });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending SMS to {PhoneNumber}", request.PhoneNumber);
                return StatusCode(500, new { Success = false, Message = "Internal server error" });
            }
        }

        /// <summary>
        /// Sends an SMS message to multiple recipients
        /// </summary>
        /// <param name="request">Bulk SMS request containing phone numbers and message</param>
        /// <returns>Results for each recipient</returns>
        [HttpPost("send-bulk")]
        public async Task<IActionResult> SendBulkSms([FromBody] SendBulkSmsRequest request)
        {
            try
            {
                _logger.LogInformation("Bulk SMS send request from user {UserId} to {Count} recipients", 
                    User.Identity?.Name, request.PhoneNumbers.Count);

                // Validate the request
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                // Send SMS to all recipients
                var results = await _smsService.SendSmsToMultipleAsync(request.PhoneNumbers, request.Message);

                var successCount = results.Count(r => r.Success);
                var totalCount = results.Count;

                return Ok(new 
                { 
                    Success = true, 
                    Message = $"Bulk SMS completed: {successCount}/{totalCount} sent successfully",
                    Results = results.Select(r => new 
                    {
                        PhoneNumber = r.PhoneNumber,
                        Success = r.Success,
                        ErrorMessage = r.ErrorMessage
                    }).ToList(),
                    Summary = new 
                    {
                        TotalSent = successCount,
                        TotalFailed = totalCount - successCount,
                        TotalRequested = totalCount
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error sending bulk SMS");
                return StatusCode(500, new { Success = false, Message = "Internal server error" });
            }
        }
    }

    /// <summary>
    /// Request model for sending SMS to a single recipient
    /// </summary>
    public class SendSmsRequest
    {
        [Required(ErrorMessage = "Phone number is required")]
        [Phone(ErrorMessage = "Invalid phone number format")]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required(ErrorMessage = "Message is required")]
        [StringLength(1600, ErrorMessage = "Message cannot exceed 1600 characters")]
        public string Message { get; set; } = string.Empty;
    }

    /// <summary>
    /// Request model for sending SMS to multiple recipients
    /// </summary>
    public class SendBulkSmsRequest
    {
        [Required(ErrorMessage = "Phone numbers are required")]
        [MinLength(1, ErrorMessage = "At least one phone number is required")]
        public List<string> PhoneNumbers { get; set; } = new();

        [Required(ErrorMessage = "Message is required")]
        [StringLength(1600, ErrorMessage = "Message cannot exceed 1600 characters")]
        public string Message { get; set; } = string.Empty;
    }
}
