// Generated by Copilot - September 1, 2025 at 2:05 PM
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ServerApp.Data;
using ServerApp.Data.Models;
using System.ComponentModel.DataAnnotations;

namespace ServerApp.Controllers
{
    /// <summary>
    /// Controller for patient management and care coordination
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Require authentication for all patient operations
    public class PatientController : ControllerBase
    {
        private readonly DatabaseContext _context;
        private readonly ILogger<PatientController> _logger;

        public PatientController(DatabaseContext context, ILogger<PatientController> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// Get all patients (for providers)
        /// </summary>
        [HttpGet]
        public async Task<IActionResult> GetPatients([FromQuery] int page = 1, [FromQuery] int pageSize = 10)
        {
            try
            {
                var query = _context.Patients
                    .Include(p => p.User)
                    .Include(p => p.PrimaryCareManager)
                    .Include(p => p.Alerts.Where(a => !a.IsAcknowledged))
                    .AsQueryable();

                var totalCount = await query.CountAsync();
                var patients = await query
                    .Skip((page - 1) * pageSize)
                    .Take(pageSize)
                    .Select(p => new PatientSummaryDto
                    {
                        Id = p.Id,
                        Name = $"{p.User.FirstName} {p.User.LastName}",
                        Age = CalculateAge(p.DateOfBirth),
                        Status = p.Status.ToString(),
                        LastVisitDate = p.LastVisitDate,
                        PrimaryCareManager = p.PrimaryCareManager != null 
                            ? $"{p.PrimaryCareManager.FirstName} {p.PrimaryCareManager.LastName}" 
                            : null,
                        UnacknowledgedAlertsCount = p.Alerts.Count(a => !a.IsAcknowledged),
                        PhoneNumber = p.PhoneNumber,
                        Email = p.User.Email
                    })
                    .ToListAsync();

                return Ok(new
                {
                    patients,
                    totalCount,
                    page,
                    pageSize,
                    totalPages = (int)Math.Ceiling((double)totalCount / pageSize)
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving patients");
                return StatusCode(500, new { message = "Internal server error" });
            }
        }

        /// <summary>
        /// Get a specific patient by ID
        /// </summary>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetPatient(int id)
        {
            try
            {
                var patient = await _context.Patients
                    .Include(p => p.User)
                    .Include(p => p.PrimaryCareManager)
                    .Include(p => p.Alerts.OrderByDescending(a => a.CreatedAt))
                    .Include(p => p.CareTasks.OrderByDescending(t => t.CreatedAt))
                    .FirstOrDefaultAsync(p => p.Id == id);

                if (patient == null)
                {
                    return NotFound(new { message = "Patient not found" });
                }

                var patientDto = new PatientDetailDto
                {
                    Id = patient.Id,
                    FirstName = patient.User.FirstName,
                    LastName = patient.User.LastName,
                    Email = patient.User.Email,
                    DateOfBirth = patient.DateOfBirth,
                    Gender = patient.Gender.ToString(),
                    PhoneNumber = patient.PhoneNumber,
                    Address = patient.Address,
                    City = patient.City,
                    State = patient.State,
                    PostalCode = patient.PostalCode,
                    BloodType = patient.BloodType,
                    Allergies = patient.Allergies,
                    CurrentMedications = patient.CurrentMedications,
                    MedicalHistory = patient.MedicalHistory,
                    Status = patient.Status.ToString(),
                    LastVisitDate = patient.LastVisitDate,
                    PrimaryCareManagerId = patient.PrimaryCareManagerId,
                    PrimaryCareManager = patient.PrimaryCareManager != null 
                        ? $"{patient.PrimaryCareManager.FirstName} {patient.PrimaryCareManager.LastName}" 
                        : null,
                    EmergencyContactName = patient.EmergencyContactName,
                    EmergencyContactPhone = patient.EmergencyContactPhone,
                    EmergencyContactRelationship = patient.EmergencyContactRelationship,
                    CreatedAt = patient.CreatedAt,
                    UpdatedAt = patient.UpdatedAt
                };

                return Ok(patientDto);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving patient {PatientId}", id);
                return StatusCode(500, new { message = "Internal server error" });
            }
        }

        /// <summary>
        /// Create a new patient
        /// </summary>
        [HttpPost]
        public async Task<IActionResult> CreatePatient([FromBody] CreatePatientRequest request)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                // Check if user already exists
                var existingUser = await _context.Users
                    .FirstOrDefaultAsync(u => u.Email == request.Email);

                User user;
                if (existingUser != null)
                {
                    user = existingUser;
                }
                else
                {
                    // Create new user account
                    user = new User
                    {
                        Email = request.Email,
                        FirstName = request.FirstName,
                        LastName = request.LastName,
                        Role = UserRole.Patient,
                        IsActive = true,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    };
                    _context.Users.Add(user);
                    await _context.SaveChangesAsync();
                }

                // Create patient record
                var patient = new Patient
                {
                    UserId = user.Id,
                    DateOfBirth = DateTime.SpecifyKind(request.DateOfBirth, DateTimeKind.Utc),
                    Gender = request.Gender,
                    PhoneNumber = request.PhoneNumber,
                    Address = request.Address,
                    City = request.City,
                    State = request.State,
                    PostalCode = request.PostalCode,
                    BloodType = request.BloodType,
                    Allergies = request.Allergies,
                    CurrentMedications = request.CurrentMedications,
                    MedicalHistory = request.MedicalHistory,
                    EmergencyContactName = request.EmergencyContactName,
                    EmergencyContactPhone = request.EmergencyContactPhone,
                    EmergencyContactRelationship = request.EmergencyContactRelationship,
                    Status = CareStatus.Stable,
                    PrimaryCareManagerId = request.PrimaryCareManagerId,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                };

                _context.Patients.Add(patient);
                await _context.SaveChangesAsync();

                _logger.LogInformation("Patient created with ID {PatientId} by user {UserId}", 
                    patient.Id, User.Identity?.Name);

                return CreatedAtAction(nameof(GetPatient), new { id = patient.Id }, 
                    new { id = patient.Id, message = "Patient created successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating patient");
                return StatusCode(500, new { message = "Internal server error" });
            }
        }

        /// <summary>
        /// Update an existing patient
        /// </summary>
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdatePatient(int id, [FromBody] UpdatePatientRequest request)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var patient = await _context.Patients
                    .Include(p => p.User)
                    .FirstOrDefaultAsync(p => p.Id == id);

                if (patient == null)
                {
                    return NotFound(new { message = "Patient not found" });
                }

                // Update user information
                patient.User.FirstName = request.FirstName;
                patient.User.LastName = request.LastName;
                patient.User.Email = request.Email;
                patient.User.UpdatedAt = DateTime.UtcNow;

                // Update patient information
                patient.DateOfBirth = DateTime.SpecifyKind(request.DateOfBirth, DateTimeKind.Utc);
                patient.Gender = request.Gender;
                patient.PhoneNumber = request.PhoneNumber;
                patient.Address = request.Address;
                patient.City = request.City;
                patient.State = request.State;
                patient.PostalCode = request.PostalCode;
                patient.BloodType = request.BloodType;
                patient.Allergies = request.Allergies;
                patient.CurrentMedications = request.CurrentMedications;
                patient.MedicalHistory = request.MedicalHistory;
                patient.EmergencyContactName = request.EmergencyContactName;
                patient.EmergencyContactPhone = request.EmergencyContactPhone;
                patient.EmergencyContactRelationship = request.EmergencyContactRelationship;
                patient.Status = request.Status;
                patient.PrimaryCareManagerId = request.PrimaryCareManagerId;
                patient.UpdatedAt = DateTime.UtcNow;

                await _context.SaveChangesAsync();

                _logger.LogInformation("Patient {PatientId} updated by user {UserId}", 
                    patient.Id, User.Identity?.Name);

                return Ok(new { message = "Patient updated successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating patient {PatientId}", id);
                return StatusCode(500, new { message = "Internal server error" });
            }
        }

        /// <summary>
        /// Get patient alerts
        /// </summary>
        [HttpGet("{id}/alerts")]
        public async Task<IActionResult> GetPatientAlerts(int id)
        {
            try
            {
                var alerts = await _context.PatientAlerts
                    .Where(a => a.PatientId == id)
                    .OrderByDescending(a => a.CreatedAt)
                    .Select(a => new PatientAlertDto
                    {
                        Id = a.Id,
                        Type = a.Type.ToString(),
                        Message = a.Message,
                        IsAcknowledged = a.IsAcknowledged,
                        Priority = a.Priority,
                        CreatedAt = a.CreatedAt,
                        AcknowledgedAt = a.AcknowledgedAt,
                        AcknowledgedBy = a.AcknowledgedBy != null 
                            ? $"{a.AcknowledgedBy.FirstName} {a.AcknowledgedBy.LastName}" 
                            : null
                    })
                    .ToListAsync();

                return Ok(alerts);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving alerts for patient {PatientId}", id);
                return StatusCode(500, new { message = "Internal server error" });
            }
        }

        /// <summary>
        /// Get care tasks for a patient
        /// </summary>
        [HttpGet("{id}/tasks")]
        public async Task<IActionResult> GetPatientTasks(int id)
        {
            try
            {
                var tasks = await _context.CareTasks
                    .Where(t => t.PatientId == id)
                    .Include(t => t.AssignedTo)
                    .Include(t => t.CreatedBy)
                    .OrderByDescending(t => t.CreatedAt)
                    .Select(t => new CareTaskDto
                    {
                        Id = t.Id,
                        Title = t.Title,
                        Description = t.Description,
                        Status = t.Status.ToString(),
                        DueDate = t.DueDate,
                        Priority = t.Priority,
                        AssignedTo = t.AssignedTo != null 
                            ? $"{t.AssignedTo.FirstName} {t.AssignedTo.LastName}" 
                            : null,
                        CreatedBy = $"{t.CreatedBy.FirstName} {t.CreatedBy.LastName}",
                        CreatedAt = t.CreatedAt,
                        CompletedAt = t.CompletedAt
                    })
                    .ToListAsync();

                return Ok(tasks);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving tasks for patient {PatientId}", id);
                return StatusCode(500, new { message = "Internal server error" });
            }
        }

        private static int CalculateAge(DateTime dateOfBirth)
        {
            var today = DateTime.Today;
            var age = today.Year - dateOfBirth.Year;
            if (dateOfBirth.Date > today.AddYears(-age)) age--;
            return age;
        }
    }

    // DTOs for the Patient API
    public class PatientSummaryDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime? LastVisitDate { get; set; }
        public string? PrimaryCareManager { get; set; }
        public int UnacknowledgedAlertsCount { get; set; }
        public string PhoneNumber { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }

    public class PatientDetailDto
    {
        public int Id { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public DateTime DateOfBirth { get; set; }
        public string Gender { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public string PostalCode { get; set; } = string.Empty;
        public string? BloodType { get; set; }
        public string? Allergies { get; set; }
        public string? CurrentMedications { get; set; }
        public string? MedicalHistory { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime? LastVisitDate { get; set; }
        public int? PrimaryCareManagerId { get; set; }
        public string? PrimaryCareManager { get; set; }
        public string EmergencyContactName { get; set; } = string.Empty;
        public string EmergencyContactPhone { get; set; } = string.Empty;
        public string EmergencyContactRelationship { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class PatientAlertDto
    {
        public int Id { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public bool IsAcknowledged { get; set; }
        public int Priority { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? AcknowledgedAt { get; set; }
        public string? AcknowledgedBy { get; set; }
    }

    public class CareTaskDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string? Description { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime? DueDate { get; set; }
        public int Priority { get; set; }
        public string? AssignedTo { get; set; }
        public string CreatedBy { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public DateTime? CompletedAt { get; set; }
    }

    public class CreatePatientRequest
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date of birth is required")]
        public DateTime DateOfBirth { get; set; }

        [Required(ErrorMessage = "Gender is required")]
        public Gender Gender { get; set; }

        [Required(ErrorMessage = "Phone number is required")]
        [StringLength(20, ErrorMessage = "Phone number cannot exceed 20 characters")]
        public string PhoneNumber { get; set; } = string.Empty;

        public string Address { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public string PostalCode { get; set; } = string.Empty;
        public string? BloodType { get; set; }
        public string? Allergies { get; set; }
        public string? CurrentMedications { get; set; }
        public string? MedicalHistory { get; set; }
        public string EmergencyContactName { get; set; } = string.Empty;
        public string EmergencyContactPhone { get; set; } = string.Empty;
        public string EmergencyContactRelationship { get; set; } = string.Empty;
        public int? PrimaryCareManagerId { get; set; }
    }

    public class UpdatePatientRequest
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date of birth is required")]
        public DateTime DateOfBirth { get; set; }

        [Required(ErrorMessage = "Gender is required")]
        public Gender Gender { get; set; }

        [Required(ErrorMessage = "Phone number is required")]
        [StringLength(20, ErrorMessage = "Phone number cannot exceed 20 characters")]
        public string PhoneNumber { get; set; } = string.Empty;

        public string Address { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
        public string PostalCode { get; set; } = string.Empty;
        public string? BloodType { get; set; }
        public string? Allergies { get; set; }
        public string? CurrentMedications { get; set; }
        public string? MedicalHistory { get; set; }
        public string EmergencyContactName { get; set; } = string.Empty;
        public string EmergencyContactPhone { get; set; } = string.Empty;
        public string EmergencyContactRelationship { get; set; } = string.Empty;
        public CareStatus Status { get; set; }
        public int? PrimaryCareManagerId { get; set; }
    }
}
