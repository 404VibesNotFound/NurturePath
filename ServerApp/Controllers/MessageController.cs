// Generated by Copilot - September 1, 2025 at 12:35 PM
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using ServerApp.Data.DTOs;
using ServerApp.Data.Models;
using ServerApp.Repositories;
using System.Security.Claims;

namespace ServerApp.Controllers
{
    /// <summary>
    /// Controller for secure messaging functionality
    /// Handles message sending, receiving, and management with role-based access control
    /// </summary>
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Require authentication for all endpoints
    public class MessageController : ControllerBase
    {
        private readonly IMessageRepository _messageRepository;

        public MessageController(IMessageRepository messageRepository)
        {
            _messageRepository = messageRepository;
        }

        /// <summary>
        /// Get current user ID from JWT token
        /// </summary>
        private int GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            Console.WriteLine($"User claims: {string.Join(", ", User.Claims.Select(c => $"{c.Type}={c.Value}"))}");
            Console.WriteLine($"NameIdentifier claim: {userIdClaim}");
            
            if (int.TryParse(userIdClaim, out int userId))
            {
                Console.WriteLine($"Parsed userId: {userId}");
                return userId;
            }
            Console.WriteLine($"Failed to parse userId from claim: {userIdClaim}");
            throw new UnauthorizedAccessException($"Invalid user token - claim value: {userIdClaim}");
        }

        /// <summary>
        /// Send a new message
        /// </summary>
        [HttpPost("send")]
        public async Task<ActionResult<MessageResponse>> SendMessage([FromBody] SendMessageRequest request)
        {
            try
            {
                var senderId = GetCurrentUserId();
                var message = await _messageRepository.SendMessage(senderId, request);

                // Return the created message as response
                var messageResponse = await _messageRepository.GetMessage(message.Id, senderId);
                return Ok(messageResponse);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to send message: {ex.Message}");
            }
        }

        /// <summary>
        /// Get all conversations for the current user
        /// </summary>
        [HttpGet("conversations")]
        public async Task<ActionResult<List<ConversationResponse>>> GetConversations()
        {
            try
            {
                var userId = GetCurrentUserId();
                var conversations = await _messageRepository.GetConversations(userId);
                return Ok(conversations ?? new List<ConversationResponse>());
            }
            catch (Exception ex)
            {
                // Log the actual error for debugging
                Console.WriteLine($"Error in GetConversations: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return StatusCode(500, new { error = ex.Message, details = ex.StackTrace });
            }
        }

        /// <summary>
        /// Get messages in a specific thread
        /// </summary>
        [HttpGet("thread/{threadId}")]
        public async Task<ActionResult<List<MessageResponse>>> GetMessagesInThread(string threadId)
        {
            try
            {
                var userId = GetCurrentUserId();
                var messages = await _messageRepository.GetMessagesInThread(threadId, userId);
                return Ok(messages);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to get messages: {ex.Message}");
            }
        }

        /// <summary>
        /// Get a specific message by ID
        /// </summary>
        [HttpGet("{messageId}")]
        public async Task<ActionResult<MessageResponse>> GetMessage(int messageId)
        {
            try
            {
                var userId = GetCurrentUserId();
                var message = await _messageRepository.GetMessage(messageId, userId);
                
                if (message == null)
                {
                    return NotFound("Message not found or access denied");
                }

                return Ok(message);
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to get message: {ex.Message}");
            }
        }

        /// <summary>
        /// Mark a message as read
        /// </summary>
        [HttpPost("{messageId}/read")]
        public async Task<ActionResult> MarkAsRead(int messageId)
        {
            try
            {
                var userId = GetCurrentUserId();
                var success = await _messageRepository.MarkMessageAsRead(messageId, userId);
                
                if (!success)
                {
                    return NotFound("Message not found or not authorized");
                }

                return Ok(new { success = true, message = "Message marked as read" });
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to mark message as read: {ex.Message}");
            }
        }

        /// <summary>
        /// Archive a message
        /// </summary>
        [HttpPost("{messageId}/archive")]
        public async Task<ActionResult> ArchiveMessage(int messageId)
        {
            try
            {
                var userId = GetCurrentUserId();
                var success = await _messageRepository.ArchiveMessage(messageId, userId);
                
                if (!success)
                {
                    return NotFound("Message not found or not authorized");
                }

                return Ok(new { success = true, message = "Message archived successfully" });
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to archive message: {ex.Message}");
            }
        }

        /// <summary>
        /// Search messages
        /// </summary>
        [HttpPost("search")]
        public async Task<ActionResult<MessageSearchResponse>> SearchMessages([FromBody] MessageSearchRequest searchRequest)
        {
            try
            {
                var userId = GetCurrentUserId();
                var results = await _messageRepository.SearchMessages(userId, searchRequest);
                return Ok(results);
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to search messages: {ex.Message}");
            }
        }

        /// <summary>
        /// Get authorized contacts for messaging
        /// </summary>
        [HttpGet("contacts")]
        public async Task<ActionResult<List<ContactDto>>> GetContacts()
        {
            try
            {
                var userId = GetCurrentUserId();
                var contacts = await _messageRepository.GetAuthorizedContacts(userId);
                
                var contactDtos = contacts?.Select(c => new ContactDto
                {
                    Id = c.Id,
                    Name = $"{c.FirstName} {c.LastName}",
                    Email = c.Email,
                    Role = c.Role.ToString()
                }).ToList() ?? new List<ContactDto>();

                return Ok(contactDtos);
            }
            catch (Exception ex)
            {
                // Log the actual error for debugging
                Console.WriteLine($"Error in GetContacts: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return StatusCode(500, new { error = ex.Message, details = ex.StackTrace });
            }
        }

        /// <summary>
        /// Check if current user can send message to another user
        /// </summary>
        [HttpGet("can-message/{receiverId}")]
        public async Task<ActionResult<bool>> CanSendMessage(int receiverId)
        {
            try
            {
                var senderId = GetCurrentUserId();
                var canSend = await _messageRepository.CanSendMessageTo(senderId, receiverId);
                return Ok(new { canSend });
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to check messaging permission: {ex.Message}");
            }
        }

        /// <summary>
        /// Download message attachment
        /// </summary>
        [HttpGet("attachment/{attachmentId}")]
        public async Task<ActionResult> DownloadAttachment(int attachmentId)
        {
            try
            {
                var userId = GetCurrentUserId();
                
                // This would need additional implementation to:
                // 1. Verify user has access to the message containing this attachment
                // 2. Retrieve attachment from database or file storage
                // 3. Return file content with appropriate headers
                
                // For now, return not implemented
                return StatusCode(501, "Attachment download not yet implemented");
            }
            catch (Exception ex)
            {
                return BadRequest($"Failed to download attachment: {ex.Message}");
            }
        }

        /// <summary>
        /// Get unread message count for current user
        /// </summary>
        [HttpGet("unread-count")]
        public async Task<ActionResult<int>> GetUnreadCount()
        {
            try
            {
                var userId = GetCurrentUserId();
                var conversations = await _messageRepository.GetConversations(userId);
                var totalUnread = conversations?.Sum(c => c.UnreadCount) ?? 0;
                
                return Ok(new { unreadCount = totalUnread });
            }
            catch (Exception ex)
            {
                // Log the actual error for debugging
                Console.WriteLine($"Error in GetUnreadCount: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                return StatusCode(500, new { error = ex.Message, details = ex.StackTrace });
            }
        }
    }

    /// <summary>
    /// DTO for contact information
    /// </summary>
    public class ContactDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}
