// Generated by Copilot - September 1, 2025 at 12:30 PM
using ServerApp.Data.DTOs;
using ServerApp.Data.Models;

namespace ServerApp.Repositories
{
    /// <summary>
    /// Interface for message repository operations
    /// Defines contracts for secure messaging functionality
    /// </summary>
    public interface IMessageRepository
    {
        /// <summary>
        /// Send a new message
        /// </summary>
        /// <param name="senderId">ID of the user sending the message</param>
        /// <param name="request">Message details</param>
        /// <returns>Created message entity</returns>
        Task<Message> SendMessage(int senderId, SendMessageRequest request);

        /// <summary>
        /// Get all conversations for a user
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <returns>List of conversation summaries</returns>
        Task<List<ConversationResponse>> GetConversations(int userId);

        /// <summary>
        /// Get messages in a specific thread
        /// </summary>
        /// <param name="threadId">Thread identifier</param>
        /// <param name="userId">Current user ID for permission checking</param>
        /// <returns>List of messages in the thread</returns>
        Task<List<MessageResponse>> GetMessagesInThread(string threadId, int userId);

        /// <summary>
        /// Get message by ID
        /// </summary>
        /// <param name="messageId">Message ID</param>
        /// <param name="userId">Current user ID for permission checking</param>
        /// <returns>Message if found and user has access, null otherwise</returns>
        Task<MessageResponse?> GetMessage(int messageId, int userId);

        /// <summary>
        /// Mark message as read
        /// </summary>
        /// <param name="messageId">Message ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>True if successful, false otherwise</returns>
        Task<bool> MarkMessageAsRead(int messageId, int userId);

        /// <summary>
        /// Archive a message
        /// </summary>
        /// <param name="messageId">Message ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>True if successful, false otherwise</returns>
        Task<bool> ArchiveMessage(int messageId, int userId);

        /// <summary>
        /// Search messages
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <param name="searchRequest">Search criteria</param>
        /// <returns>Paginated search results</returns>
        Task<MessageSearchResponse> SearchMessages(int userId, MessageSearchRequest searchRequest);

        /// <summary>
        /// Get user's authorized contacts (providers/patients they can message)
        /// </summary>
        /// <param name="userId">User ID</param>
        /// <returns>List of contacts</returns>
        Task<List<User>> GetAuthorizedContacts(int userId);

        /// <summary>
        /// Check if user can send message to another user
        /// </summary>
        /// <param name="senderId">Sender user ID</param>
        /// <param name="receiverId">Receiver user ID</param>
        /// <returns>True if authorized, false otherwise</returns>
        Task<bool> CanSendMessageTo(int senderId, int receiverId);

        /// <summary>
        /// Generate or get existing thread ID for two users
        /// </summary>
        /// <param name="user1Id">First user ID</param>
        /// <param name="user2Id">Second user ID</param>
        /// <returns>Thread ID</returns>
        string GenerateThreadId(int user1Id, int user2Id);
    }
}
