// Generated by Copilot - September 1, 2025 at 12:30 PM
using System.ComponentModel.DataAnnotations;
using ServerApp.Data.Models;

namespace ServerApp.Data.DTOs
{
    /// <summary>
    /// Data transfer object for sending a new message
    /// </summary>
    public class SendMessageRequest
    {
        [Required(ErrorMessage = "Receiver ID is required")]
        public int ReceiverId { get; set; }

        [Required(ErrorMessage = "Subject is required")]
        [StringLength(200, ErrorMessage = "Subject cannot exceed 200 characters")]
        public string Subject { get; set; } = string.Empty;

        [Required(ErrorMessage = "Message content is required")]
        [StringLength(5000, ErrorMessage = "Message content cannot exceed 5000 characters")]
        public string Content { get; set; } = string.Empty;

        public MessagePriority Priority { get; set; } = MessagePriority.Normal;

        public string? ThreadId { get; set; }

        public int? ReplyToMessageId { get; set; }

        public List<AttachmentUploadDto>? Attachments { get; set; }
    }

    /// <summary>
    /// Data transfer object for message response
    /// </summary>
    public class MessageResponse
    {
        public int Id { get; set; }
        public int SenderId { get; set; }
        public string SenderName { get; set; } = string.Empty;
        public string SenderRole { get; set; } = string.Empty;
        public int ReceiverId { get; set; }
        public string ReceiverName { get; set; } = string.Empty;
        public string ReceiverRole { get; set; } = string.Empty;
        public string Subject { get; set; } = string.Empty;
        public string Content { get; set; } = string.Empty;
        public MessagePriority Priority { get; set; }
        public string PriorityText { get; set; } = string.Empty;
        public MessageType MessageType { get; set; }
        public bool IsRead { get; set; }
        public DateTime? ReadAt { get; set; }
        public bool IsArchived { get; set; }
        public string? ThreadId { get; set; }
        public int? ReplyToMessageId { get; set; }
        public DateTime SentAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public List<AttachmentDto> Attachments { get; set; } = new();
        public int ReplyCount { get; set; }
    }

    /// <summary>
    /// Data transfer object for conversation summary
    /// </summary>
    public class ConversationResponse
    {
        public string ThreadId { get; set; } = string.Empty;
        public int OtherParticipantId { get; set; }
        public string OtherParticipant { get; set; } = string.Empty;
        public string OtherParticipantRole { get; set; } = string.Empty;
        public string LastMessageSubject { get; set; } = string.Empty;
        public string LastMessageContent { get; set; } = string.Empty;
        public DateTime LastMessageTime { get; set; }
        public MessagePriority Priority { get; set; }
        public bool HasUnreadMessages { get; set; }
        public int UnreadCount { get; set; }
        public int TotalMessages { get; set; }
    }

    /// <summary>
    /// Data transfer object for marking message as read
    /// </summary>
    public class MarkMessageReadRequest
    {
        [Required]
        public int MessageId { get; set; }
    }

    /// <summary>
    /// Data transfer object for message search
    /// </summary>
    public class MessageSearchRequest
    {
        public string? Query { get; set; }
        public MessagePriority? Priority { get; set; }
        public int? FromUserId { get; set; }
        public int? ReceiverId { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public bool? IsRead { get; set; }
        public bool IncludeArchived { get; set; } = false;
        public int Page { get; set; } = 1;
        public int PageSize { get; set; } = 20;
    }

    /// <summary>
    /// Data transfer object for paginated message results
    /// </summary>
    public class MessageSearchResponse
    {
        public List<MessageResponse> Messages { get; set; } = new();
        public int TotalCount { get; set; }
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalPages { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }

    /// <summary>
    /// Data transfer object for message attachments
    /// </summary>
    public class AttachmentDto
    {
        public int Id { get; set; }
        public string FileName { get; set; } = string.Empty;
        public long FileSize { get; set; }
        public string FileType { get; set; } = string.Empty;
        public DateTime UploadedAt { get; set; }
    }

    /// <summary>
    /// Data transfer object for uploading attachments
    /// </summary>
    public class AttachmentUploadDto
    {
        [Required(ErrorMessage = "File name is required")]
        public string FileName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "File content is required")]
        public byte[] FileContent { get; set; } = Array.Empty<byte>();
        
        [Required(ErrorMessage = "File type is required")]
        public string FileType { get; set; } = string.Empty;
        
        public long FileSize { get; set; }
    }
}
